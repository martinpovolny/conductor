#!/usr/bin/env ruby
# encoding: utf-8

require File.expand_path('./config/environment.rb')
##
###def load_costs_ec2
###  inputs = ActiveSupport::JSON.decode(`~/ec2instancespricing/ec2instancespricing.py --type ondemand --filter-os-type linux --format json`)
###  
###  p inputs
###  p inputs.keys
###  regions = inputs['regions'].collect {|r| r['region'] }
###  p regions
###  #["us-east-1", "us-west-2", "us-west-1", "eu-west-1", "ap-southeast-1", "ap-northeast-1", "sa-east-1"]
###  
###  ec2_profiles = inputs['regions'].find {|r| r['region']=='us-east-1' }
###  p ec2_profiles
###  
###  profile2price = {}
###  ec2_profiles['instanceTypes'].each { |p| profile2price[p['type']] = p }
###  
###  p "ec2 hash"
###  p profile2price
###  
###  p profile2price['t1.micro']['price']
###  
###  profiles = HardwareProfile.where("external_key is not NULL")
###  p "backend profiles"
###  p profiles
###  
###  # [#<HardwareProfile id: 1, external_key: "t1.micro", name: "t1.micro", memory_id: 1, storage_id: 2, cpu_id: 3, architecture_id: 4, provider_id: 1, lock_version: 0, created_at: "2012-10-19 13:52:02", updated_at: "2012-10-19 13:52:02">,
###  
###  Cost.delete_all
###  
###  profiles.each { |profile|
###    p '*' * 20
###    p ek = profile.external_key
###    p ec2prof = profile2price[ek]
###
###    unless ec2prof.nil?
###      p ec2prof['price']
###  
###      cost = Cost.create!(
###        :chargeable_id   => profile.id,
###        :chargeable_type => 1, #:hardware_profile,
###        # currency        => 'USD',
###        :price             => BigDecimal( ec2prof['price'].to_s ),
###        :valid_from        => Time.now() - 10.days, # FIXME
###        :valid_to          => nil,
###        :billing_model     => 1
###      )
###    end
###  }
###  
###  p Cost.find(:all)
###end
###
###def load_costs_mock
###  ProviderType.find_by_deltacloud_driver('mock').providers.each do |provider|
###    provider.hardware_profiles.each do |profile|
###      cost = Cost.create!(
###        :chargeable_id   => profile.id,
###        :chargeable_type => 1, #:hardware_profile,
###        :price             => BigDecimal( 1 ),
###        :valid_from        => Time.now() - 100.days, # FIXME
###        :valid_to          => nil,
###        :billing_model     => 2
###      )
###    end
###  end
###end
##
###require '/home/martin/.gem/ruby/1.9.1/gems/simple-decorator-0.2.0/lib/simple_decorator.rb'
##require 'active_support/concern'
##
##module CostEngine
###  # implements billing model
###  #   pay per day/hour/minute/wallclock hour
###  #   par per start/stop/whatever
###  module BillingModel
###    MODELS = {}
###    class WallClockHour
###      def self.calculate( price_per_hour, start_t, end_t )
###        start_t = start_t.change( :min=> 1  )
###        end_t   = end_t.change(   :min=> 59 )
###        price_per_hour * ((end_t-start_t + 3600) / 3600).to_i
###      end
###      BillingModel::MODELS[1] = self
###    end
###
###    class Hour
###      def self.calculate( price_per_hour, start_t, end_t )
###        price_per_hour * ((end_t-start_t + 3600) / 3600).to_i
###      end
###      BillingModel::MODELS[2] = self
###    end
###  end
##
##  module Decorators
##
##module InstanceMatch
##  extend ActiveSupport::Concern
##        
##  def cost
##    match    = self
##    hwp      = self.hardware_profile
##    instance = self.instance
##
##    start = instance[:time_last_running]
##    stop  = instance[:time_last_stopped] || Time.now
##
##    cost = Cost.find_by_chargeable_and_time_range( 1, hwp.id, start, stop )
##
##    model = BillingModel::MODELS[cost.billing_model]
##    model.calculate( cost.price, start, stop )
##  end
##end
##
##module Instance
##  extend ActiveSupport::Concern
##  def cost
##    # FIXME: kdy ma Instance vice InstanceMatches
##    instance_matches[0].cost
##  end
##end
##
##module Deployment
##  extend ActiveSupport::Concern
##  def cost
##    instances.inject(0) { |sum, instance| 
##      sum + instance.cost
##    }
##  end
##end
##
##  end
##end

#$: << '../../costengine/lib/'
#require 'costengine'

Cost.delete_all
CostEngine::Loaders::Mock.init_profiles
CostEngine::Loaders::EC2.init_profiles
CostEngine::Loaders::RHEVM.init_profiles
exit

#CostEngine.infect_models # done in confin/initializers/cost_engine.rb

Deployment.all.each { |d|
  puts "#{d.id}: #{d.cost}"
}

exit

# #InstanceMatch
# #Instance
# #Deployment
# #
# #class InstanceMatch
# #  include CostEngine::Decorators::InstanceMatch
# #end
# #
# #class Instance
# #  #include CTest
# #  include CostEngine::Decorators::Instance
# #end
# #
# #class Deployment
# #  include CostEngine::Decorators::Deployment
# #end
# #
# ##i = Instance.find(1); p i.fsck; exit
# 
# p ['instance_match', InstanceMatch.all[0].cost.to_f]
# p ['instance', Instance.find(1).cost.to_f]
# 
# #p CostEngine::BillingModel::MODELS; exit
# 
# deployment = Deployment.find(1)
# p ['deployment', deployment.cost.to_f]
# 
# Deployment.all.collect.each { |d|
#   puts "#{d.id}: #{d.cost}"
# }
